// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String   @unique(map: "product_slug_idx")
  category    String
  images      String[]
  brand       String
  description String
  stock       Int
  price       Decimal  @default(0) @db.Decimal(6, 2)
  rating      Decimal  @default(0) @db.Decimal(3, 2)
  numReviews  Int      @default(0)
  isFeatured  Boolean  @default(false)
  banner      String?
  createdAt   DateTime @default(now()) @db.Timestamp(6)
}

model Customer {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  number      String   @unique(map: "customer_number_idx")
  name        String
  email       String   @unique(map: "customer_email_idx")
  street1     String
  street2     String
  postcode    String
  city        String
  phone       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoices    Invoice[] // Relation to invoices
}

model Invoice {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customerId  String    @db.Uuid
  number      String    @unique(map: "invoice_number_idx")
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  invoiceDate DateTime  @default(now())
  amount      Decimal   @db.Decimal(10, 2)
  status      String    @default("PENDING") // PENDING, PAID, CANCELLED
  dueDate     DateTime
  paidAt      DateTime?
  balance     Decimal   @db.Decimal(10, 2)
  comments    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@index([customerId])
}

